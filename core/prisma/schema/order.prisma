model Order {
    id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId          String      @db.Uuid
    shippingAddress Json        @db.Json
    paymentMethod   String
    paymentResult   Json?       @db.Json
    itemsPrice      Decimal     @db.Decimal(12, 2)
    shippingPrice   Decimal     @db.Decimal(12, 2)
    taxPrice        Decimal     @db.Decimal(12, 2)
    totalPrice      Decimal     @db.Decimal(12, 2)
    isPaid          Boolean     @default(false)
    isDelivered     Boolean     @default(false)
    paidAt          DateTime?   @db.Timestamp(6)
    deliveredAt     DateTime?   @db.Timestamp(6)
    createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt       DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)
    user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    orderitems      OrderItem[]
}

model OrderItem {
    orderId   String   @db.Uuid
    productId String   @db.Uuid
    qty       Int
    price     Decimal  @db.Decimal(12, 2)
    name      String
    slug      String
    image     String
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime @updatedAt @map("updated_at")
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    Product   Product  @relation(fields: [productId], references: [id])

    @@id([orderId, productId], map: "orderItems_orderId_productId_pk")
}
