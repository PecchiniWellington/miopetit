model Product {
    id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name              String
    slug              String   @unique(map: "product_slug_idx")
    images            String[]
    brand             String
    description       String
    stock             Int
    price             Decimal  @default(0) @db.Decimal(12, 2)
    rating            Decimal  @default(0) @db.Decimal(3, 2)
    numReviews        Int      @default(0)
    isFeatured        Boolean? @default(false)
    banner            String?
    createdAt         DateTime @default(now()) @db.Timestamp(6)
    updatedAt         DateTime @updatedAt
    categoryId        String?  @db.Uuid
    productBrandId    String?  @db.Uuid
    formatId          String?  @db.Uuid
    animalAgeId       String?  @db.Uuid
    productFeaturesId String?  @db.Uuid
    productProteinId  String?  @db.Uuid
    productPatologyId String?  @db.Uuid

    category        Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    orderitems      OrderItem[]
    Review          Review[]
    productBrand    ProductBrand?    @relation("ProductBrand", fields: [productBrandId], references: [id], onDelete: SetNull)
    format          Format?          @relation("ProductFormat", fields: [formatId], references: [id], onDelete: SetNull)
    animalAge       AnimalAge?       @relation("AnimalAge", fields: [animalAgeId], references: [id], onDelete: SetNull)
    productFeatures ProductFeatures? @relation("ProductFeatures", fields: [productFeaturesId], references: [id], onDelete: SetNull)
    productProtein  ProductProtein?  @relation("ProductProtein", fields: [productProteinId], references: [id], onDelete: SetNull)
    productPatology ProductPatology? @relation("ProductPatology", fields: [productPatologyId], references: [id], onDelete: SetNull)
}
